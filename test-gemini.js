import { GoogleGenAI } from '@google/genai';
import dotenv from 'dotenv';

dotenv.config();

const ai = new GoogleGenAI({
  apiKey: process.env.GEMINI_API_KEY
});

console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Gemini API...\n');

// –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
async function testTextGeneration() {
  console.log('üìù –¢–µ—Å—Ç 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞');
  try {
    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash',
      contents: '–û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: —Ä–∞–±–æ—Ç–∞–µ—Ç?'
    });
    
    console.log('‚úÖ –¢–µ–∫—Å—Ç–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!');
    console.log('–û—Ç–≤–µ—Ç:', response.text);
    console.log('');
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', error.message);
    console.log('');
    return false;
  }
}

// –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞
async function testAPIKey() {
  console.log('üîë –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞');
  
  const apiKey = process.env.GEMINI_API_KEY;
  
  if (!apiKey) {
    console.error('‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
    console.log('üí° –î–æ–±–∞–≤—å—Ç–µ GEMINI_API_KEY –≤ .env —Ñ–∞–π–ª');
    console.log('');
    return false;
  }
  
  if (apiKey === 'your_gemini_api_key_here') {
    console.error('‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)');
    console.log('üí° –ó–∞–º–µ–Ω–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ .env –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª—é—á');
    console.log('');
    return false;
  }
  
  if (!apiKey.startsWith('AIza')) {
    console.warn('‚ö†Ô∏è  API –∫–ª—é—á –∏–º–µ–µ—Ç –Ω–µ–æ–±—ã—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (–æ–±—ã—á–Ω–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å AIza)');
  }
  
  console.log('‚úÖ API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω:', apiKey.substring(0, 10) + '...');
  console.log('');
  return true;
}

// –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–∏
async function testModelAccess() {
  console.log('ü§ñ –¢–µ—Å—Ç 3: –î–æ—Å—Ç—É–ø –∫ –º–æ–¥–µ–ª–∏ gemini-2.5-flash');
  try {
    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash',
      contents: '–ü—Ä–∏–≤–µ—Ç!'
    });
    
    if (response && response.text) {
      console.log('‚úÖ –ú–æ–¥–µ–ª—å gemini-2.5-flash –¥–æ—Å—Ç—É–ø–Ω–∞!');
      console.log('');
      return true;
    } else {
      console.error('‚ùå –ú–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç');
      console.log('');
      return false;
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–æ–¥–µ–ª–∏:', error.message);
    
    if (error.message.includes('API key')) {
      console.log('üí° –ü—Ä–æ–±–ª–µ–º–∞ —Å API –∫–ª—é—á–æ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ –Ω–∞ ai.google.dev');
    } else if (error.message.includes('model')) {
      console.log('üí° –ú–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –≤–µ—Ä—Å–∏—é.');
    } else if (error.message.includes('quota')) {
      console.log('üí° –ü—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞ API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç–µ –ø–ª–∞–Ω.');
    }
    
    console.log('');
    return false;
  }
}

// –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
async function testResponseStructure() {
  console.log('üì¶ –¢–µ—Å—Ç 4: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ API');
  try {
    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash',
      contents: '–°–∫–∞–∂–∏ "—Ç–µ—Å—Ç"'
    });
    
    console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è –≤ response:');
    console.log('- response.text:', typeof response.text, '‚Üí', response.text ? '‚úÖ' : '‚ùå');
    console.log('- response.candidates:', typeof response.candidates, '‚Üí', response.candidates ? '‚úÖ' : '‚ùå');
    
    if (response.candidates && response.candidates[0]) {
      console.log('- response.candidates[0].content:', typeof response.candidates[0].content);
    }
    
    console.log('');
    console.log('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞');
    console.log('');
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    console.log('');
    return false;
  }
}

// –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ (—Å–∏–º—É–ª—è—Ü–∏—è)
async function testImageSupport() {
  console.log('üñºÔ∏è  –¢–µ—Å—Ç 5: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π');
  console.log('‚ÑπÔ∏è  –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –Ω—É–∂–Ω–æ —Ä–µ–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
  console.log('‚ÑπÔ∏è  –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–∞–ø—Ä–æ—Å–∞...');
  
  // –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (1x1 –±–µ–ª—ã–π –ø–∏–∫—Å–µ–ª—å PNG)
  const testImageBase64 = 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mP8/5+hHgAHggJ/PchI7wAAAABJRU5ErkJggg==';
  
  try {
    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash',
      contents: [
        {
          role: 'user',
          parts: [
            { text: '–û–ø–∏—à–∏ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ' },
            {
              inlineData: {
                mimeType: 'image/png',
                data: testImageBase64
              }
            }
          ]
        }
      ]
    });
    
    if (response && (response.text || (response.candidates && response.candidates[0]))) {
      console.log('‚úÖ API –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!');
      console.log('–û—Ç–≤–µ—Ç –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:', response.text?.substring(0, 100) || '–ø–æ–ª—É—á–µ–Ω');
    } else {
      console.log('‚ö†Ô∏è  API –æ—Ç–≤–µ—Ç–∏–ª, –Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–µ–æ–±—ã—á–Ω–∞—è');
    }
    
    console.log('');
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error.message);
    console.log('');
    return false;
  }
}

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
async function runAllTests() {
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  console.log('   –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï GEMINI API');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
  
  const results = {
    apiKey: await testAPIKey(),
    textGeneration: await testTextGeneration(),
    modelAccess: await testModelAccess(),
    responseStructure: await testResponseStructure(),
    imageSupport: await testImageSupport()
  };
  
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  console.log('         –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
  
  console.log('API –∫–ª—é—á:                ', results.apiKey ? '‚úÖ OK' : '‚ùå FAIL');
  console.log('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞:        ', results.textGeneration ? '‚úÖ OK' : '‚ùå FAIL');
  console.log('–î–æ—Å—Ç—É–ø –∫ –º–æ–¥–µ–ª–∏:         ', results.modelAccess ? '‚úÖ OK' : '‚ùå FAIL');
  console.log('–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:        ', results.responseStructure ? '‚úÖ OK' : '‚ùå FAIL');
  console.log('–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:   ', results.imageSupport ? '‚úÖ OK' : '‚ùå FAIL');
  
  console.log('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
  
  const allPassed = Object.values(results).every(r => r === true);
  
  if (allPassed) {
    console.log('üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!');
    console.log('‚úÖ Gemini API –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
    console.log('üöÄ –ú–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å–∫–∞—Ç—å –±–æ—Ç–∞: npm start\n');
  } else {
    console.log('‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´');
    console.log('üìñ –°–º–æ—Ç—Ä–∏—Ç–µ TROUBLESHOOTING.md –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º\n');
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫
runAllTests().catch(error => {
  console.error('\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error);
  process.exit(1);
});


