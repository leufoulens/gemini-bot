#!/bin/bash

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker
check_docker() {
    if ! command -v docker &> /dev/null; then
        print_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
        echo "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker: https://docs.docker.com/get-docker/"
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        print_error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
        echo "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Compose: https://docs.docker.com/compose/install/"
        exit 1
    fi
    
    print_success "Docker –∏ Docker Compose —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞
check_env() {
    if [ ! -f .env ]; then
        print_error "–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!"
        print_info "–°–æ–∑–¥–∞–Ω–∏–µ .env –∏–∑ .env.example..."
        
        if [ -f .env.example ]; then
            cp .env.example .env
            print_warning "–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª —Å –≤–∞—à–∏–º–∏ –∫–ª—é—á–∞–º–∏:"
            echo "  nano .env"
            exit 1
        else
            print_error ".env.example –Ω–µ –Ω–∞–π–¥–µ–Ω!"
            exit 1
        fi
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ .env
    if grep -q "your_telegram_bot_token_here" .env || grep -q "your_gemini_api_key_here" .env; then
        print_error ".env —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é!"
        print_warning "–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏:"
        echo "  nano .env"
        exit 1
    fi
    
    print_success "–§–∞–π–ª .env –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
}

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
start_bot() {
    print_info "–ó–∞–ø—É—Å–∫ Gemini Telegram Bot..."
    
    docker-compose up -d --build
    
    if [ $? -eq 0 ]; then
        print_success "–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!"
        print_info "–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤: docker-compose logs -f"
    else
        print_error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"
        exit 1
    fi
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
stop_bot() {
    print_info "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞..."
    docker-compose stop
    print_success "–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
}

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
restart_bot() {
    print_info "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞..."
    docker-compose restart
    print_success "–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω"
}

# –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
view_logs() {
    print_info "–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞)..."
    docker-compose logs -f
}

# –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç—É—Å–∞
status() {
    print_info "–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
    docker-compose ps
    
    echo ""
    print_info "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤:"
    docker stats --no-stream gemini-telegram-bot 2>/dev/null || echo "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω"
}

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞
update_bot() {
    print_info "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞..."
    
    # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è git
    if [ -d .git ]; then
        print_info "–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–∑ git..."
        git pull
    fi
    
    print_info "–ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫..."
    docker-compose up -d --build
    
    print_success "–ë–æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!"
}

# –ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
cleanup() {
    print_warning "–≠—Ç–æ —É–¥–∞–ª–∏—Ç –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∏ –æ–±—Ä–∞–∑—ã!"
    read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): " confirm
    
    if [[ $confirm == [yY] ]]; then
        print_info "–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∏ –æ–±—Ä–∞–∑–æ–≤..."
        docker-compose down --rmi all --volumes
        print_success "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
    else
        print_info "–û—Ç–º–µ–Ω–µ–Ω–æ"
    fi
}

# –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤
backup_logs() {
    BACKUP_FILE="logs-backup-$(date +%Y%m%d-%H%M%S).txt"
    print_info "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –ª–æ–≥–æ–≤..."
    docker-compose logs > "$BACKUP_FILE"
    print_success "–õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ $BACKUP_FILE"
}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
show_menu() {
    echo ""
    echo "=================================="
    echo "ü§ñ Gemini Telegram Bot - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"
    echo "=================================="
    echo "1. üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"
    echo "2. ‚è∏Ô∏è  –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞"
    echo "3. üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"
    echo "4. üìä –°—Ç–∞—Ç—É—Å"
    echo "5. üìú –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"
    echo "6. üîº –û–±–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞"
    echo "7. üíæ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤"
    echo "8. üóëÔ∏è  –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞"
    echo "9. ‚ùå –í—ã—Ö–æ–¥"
    echo "=================================="
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    clear
    echo "ü§ñ Gemini Telegram Bot - Deploy Script"
    echo ""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    check_docker
    check_env
    
    # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if [ $# -gt 0 ]; then
        case "$1" in
            start)
                start_bot
                ;;
            stop)
                stop_bot
                ;;
            restart)
                restart_bot
                ;;
            logs)
                view_logs
                ;;
            status)
                status
                ;;
            update)
                update_bot
                ;;
            backup)
                backup_logs
                ;;
            cleanup)
                cleanup
                ;;
            *)
                echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 {start|stop|restart|logs|status|update|backup|cleanup}"
                exit 1
                ;;
        esac
        exit 0
    fi
    
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é
    while true; do
        show_menu
        read -p "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-9): " choice
        
        case $choice in
            1)
                start_bot
                ;;
            2)
                stop_bot
                ;;
            3)
                restart_bot
                ;;
            4)
                status
                ;;
            5)
                view_logs
                ;;
            6)
                update_bot
                ;;
            7)
                backup_logs
                ;;
            8)
                cleanup
                ;;
            9)
                print_info "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!"
                exit 0
                ;;
            *)
                print_error "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!"
                ;;
        esac
        
        echo ""
        read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
    done
}

# –ó–∞–ø—É—Å–∫
main "$@"



